<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaGui 02 Pannel-面板</title>
      <link href="/2020/05/22/javagui02/"/>
      <url>/2020/05/22/javagui02/</url>
      
        <content type="html"><![CDATA[<h2 id="在javaGui中，Panel是一个轻量级的容器类"><a href="#在javaGui中，Panel是一个轻量级的容器类" class="headerlink" title="在javaGui中，Panel是一个轻量级的容器类"></a>在javaGui中，Panel是一个轻量级的容器类</h2><a id="more"></a><h2 id="1-Pannel是什么"><a href="#1-Pannel是什么" class="headerlink" title="1.Pannel是什么"></a>1.Pannel是什么</h2><p>在javaGui中，Panel是一个轻量级的容器类，可以将panel看作是画板。</p><h2 id="2-怎么用panel"><a href="#2-怎么用panel" class="headerlink" title="2.怎么用panel"></a>2.怎么用panel</h2><ol><li>Frame对象</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实例化Frame对象</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </code></pre><ol start="2"><li>Panel对象</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实例化一个Panel对象</span>        Panel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li><p>设置布局</p><p>布局包括常见的流式布局,盒式布局等等</p></li></ol><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//布局设置为空。具体布局后面再叙述</span>           frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><ol start="4"><li>设置frame长宽,坐标</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置frame的坐标以及大小，等价于：</span>        <span class="token comment" spellcheck="true">//frame.setLocation(100, 100);//设置坐标</span>        <span class="token comment" spellcheck="true">//frame.setSize(500, 500);//设置长款（大小）</span>        frame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><ol start="5"><li>背景颜色</li></ol><p>设置背景颜色的参数是Color,颜色类,直接new一个传进去,Color接受RGB和RGBA,也有自己常用的常量颜色</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//设置背景颜色</span>        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><ol start="6"><li>设置pannel坐标</li></ol><p>注意,panel的坐标是以Frame为参考系,而frame是以屏幕为参考系</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//panel坐标，相对于frame</span>        panel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="7"><li>panel颜色</li></ol><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//panel颜色</span>        panel<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">142</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="8"><li>frame添加panel</li></ol><p>add方法参数为Component对像,Panel继承于Container,Container继承于Component,因此可以直接将Panel对象传进去</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//frame.add</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="9"><li>设置frame可见</li></ol><pre class=" language-java"><code class="language-java">        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="10"><li>关闭窗口按钮事件重写</li></ol><p>这里是适配器模式.只需要重写我们需要重写的方法即可</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//监听窗口关闭</span>        <span class="token comment" spellcheck="true">//设计模式-适配器模式</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">windowClosing</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-完整代码-amp-代码结果"><a href="#3-完整代码-amp-代码结果" class="headerlink" title="3.完整代码&amp;代码结果"></a>3.完整代码&amp;代码结果</h2><p><img src="https://i.loli.net/2020/05/22/WCozew9sYpQa2BS.png" alt="image-20200522225357989"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>WindowAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>WindowEvent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Panel，可以看成一个空间，但是不能单独存在，这里添加到Frame上面</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPanel</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化Frame对象</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化一个Panel对象</span>        Panel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//布局设置为空。具体布局后面再叙述</span>        frame<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置frame的坐标以及大小，等价于：</span>        <span class="token comment" spellcheck="true">//frame.setLocation(100, 100);//设置坐标</span>        <span class="token comment" spellcheck="true">//frame.setSize(500, 500);//设置长款（大小）</span>        frame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置背景颜色</span>        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//panel坐标，相对于frame</span>        panel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//panel颜色</span>        panel<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">142</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//frame.add</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//监听窗口关闭</span>        <span class="token comment" spellcheck="true">//设计模式-适配器模式</span>        frame<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span>WindowEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">windowClosing</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaGUi01 Frame窗口</title>
      <link href="/2020/05/21/javagui01/"/>
      <url>/2020/05/21/javagui01/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaGUi-01-Frame"><a href="#JavaGUi-01-Frame" class="headerlink" title="JavaGUi 01 Frame"></a>JavaGUi 01 Frame</h1><a id="more"></a><p>Frame窗口,简单的Deom如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//GUI的以一个界面</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFrame</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Frame,看源码</span>        Frame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"我的第一个Java图形窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需要设置可见性 w,h</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置窗口大小</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置背景颜色</span>        frame<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//弹出基本位置/</span>        frame<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置大小固定</span>        frame<span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.loli.net/2020/05/21/1Q3DwOqXWo62By9.png" alt="image-20200521224840623"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微博批量取关</title>
      <link href="/2019/12/15/wei-bo-pi-liang-qu-guan/"/>
      <url>/2019/12/15/wei-bo-pi-liang-qu-guan/</url>
      
        <content type="html"><![CDATA[<h1 id="微博批量取消关注"><a href="#微博批量取消关注" class="headerlink" title="微博批量取消关注"></a>微博批量取消关注</h1><a id="more"></a><p>今天发现微博既然关注了一些乱七八糟的人。我寻思着我也没干啥没盗号啊，百度一番发现是渣浪的尿性。</p><p>怎么办？</p><p>全部给我取消关注mmp！</p><p><img src="1.png" alt></p><h2 id="1-点击批量管理"><a href="#1-点击批量管理" class="headerlink" title="1. 点击批量管理"></a>1. 点击批量管理</h2><p>肯定是要批量删除，一百多个我删半年我又没病</p><p><img src="2.png" alt></p><h2 id="2-观察"><a href="#2-观察" class="headerlink" title="2.观察"></a>2.观察</h2><p>这里点击是吧，好的Get。</p><p><img src="3.png" alt></p><h2 id="3-打开开发者工具"><a href="#3-打开开发者工具" class="headerlink" title="3. 打开开发者工具"></a>3. 打开开发者工具</h2><p><img src="4.png" alt></p><h2 id="5-再观察"><a href="#5-再观察" class="headerlink" title="5. 再观察"></a>5. 再观察</h2><p>选取一下元素，发现这是这个<code>div</code>,盘他！</p><p><img src="5.png" alt></p><h2 id="6-上代码，程序员都是很懒的"><a href="#6-上代码，程序员都是很懒的" class="headerlink" title="6. 上代码，程序员都是很懒的"></a>6. 上代码，程序员都是很懒的</h2><p>点击Console，输入代码，回车，然后点击删除，完工</p><p><img src="6.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C指针</title>
      <link href="/2019/11/07/pointer/"/>
      <url>/2019/11/07/pointer/</url>
      
        <content type="html"><![CDATA[<h1 id="物联网实验室C指针培训讲义"><a href="#物联网实验室C指针培训讲义" class="headerlink" title="物联网实验室C指针培训讲义"></a>物联网实验室C指针培训讲义</h1><a id="more"></a><h3 id="1-什么是指针"><a href="#1-什么是指针" class="headerlink" title="1. 什么是指针"></a>1. 什么是指针</h3><pre><code>地址</code></pre><h3 id="2-内存"><a href="#2-内存" class="headerlink" title="2.内存"></a>2.内存</h3><table><thead><tr><th align="center"></th><th align="center">作用域</th><th align="center">生命周期</th></tr></thead><tbody><tr><td align="center">全局内存</td><td align="center">整个文件</td><td align="center">应用程序的生命周期</td></tr><tr><td align="center">静态内存</td><td align="center">声明他的函数内部</td><td align="center">应用程序的生命周期</td></tr><tr><td align="center">自动内存</td><td align="center">声明他的函数内部</td><td align="center">函数执行时间内</td></tr><tr><td align="center">动态内存</td><td align="center">由引起该内存的指针决定</td><td align="center">释放之前</td></tr></tbody></table><h3 id="3-指针变量"><a href="#3-指针变量" class="headerlink" title="3.指针变量"></a>3.指针变量</h3><ul><li>存放指针的变量</li></ul><h3 id="4-为什么用指针"><a href="#4-为什么用指针" class="headerlink" title="4.为什么用指针"></a>4.为什么用指针</h3><ul><li>动态分配</li><li>简洁的表达式</li><li>减少开销</li><li>保护数据</li></ul><p>对比数组和链表,存储信息</p><ul><li>十个学生的学号怎么储存</li><li>学号+姓名又怎么储存</li></ul><p>简洁 -&gt; 难懂</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"miller"</span><span class="token punctuation">,</span> <span class="token string">"jones"</span><span class="token punctuation">,</span> <span class="token string">"Anderson"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>names <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-指针声明"><a href="#5-指针声明" class="headerlink" title="5.指针声明"></a>5.指针声明</h3><ul><li><code>*</code>一般称之为解引</li></ul><h3 id="6-如何阅读指针"><a href="#6-如何阅读指针" class="headerlink" title="6.如何阅读指针"></a>6.如何阅读指针</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span></code></pre><h3 id="7-取地址符-amp"><a href="#7-取地址符-amp" class="headerlink" title="7.取地址符&amp;"></a>7.取地址符&amp;</h3><ul><li>在哪见过?<code>scanf</code>里面, 为什么<code>printf</code>不用</li></ul><h3 id="8-指向函数的指针"><a href="#8-指向函数的指针" class="headerlink" title="8.指向函数的指针"></a>8.指向函数的指针</h3><ul><li>定义<code>void (*fun)();</code></li></ul><h3 id="9-NULL和0"><a href="#9-NULL和0" class="headerlink" title="9.NULL和0"></a>9.NULL和0</h3><ul><li>NULL和0都可以用来初始化指针</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span><span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个0的区别</span></code></pre><h3 id="10-void类型指针"><a href="#10-void类型指针" class="headerlink" title="10.void类型指针"></a>10.void类型指针</h3><ul><li>通用类型的指针，任何类型指针都可以转成<code>void</code>，也可以转回原来的类型</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p1,p3等价，对比float转int再转float区别</span><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span><span class="token keyword">float</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span></code></pre><ul><li><p><code>void</code>和其他类型的指针永不相等，除了值为<code>NULL</code>的<code>void</code>指针（真香）</p></li><li><p><code>sizeof</code>操作符。可用在<code>void</code>类型指针上，不能用在<code>void</code>上。思考原因</p><pre class=" language-c"><code class="language-c">len1 <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//合法</span>len2 <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非法,这是什么意思</span>len_int <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span></code></pre></li></ul><h3 id="11-指针操作符"><a href="#11-指针操作符" class="headerlink" title="11.指针操作符"></a>11.指针操作符</h3><ul><li>加法</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> vector<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> vector<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为什么不用取地址符</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>pi <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>pi <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//警防越界</span></code></pre><ul><li>减法</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> vector<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> vector <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>pi <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>pi <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>指针相减</p><p>指针之间也可以相减，差值通常没什么作用，但可以用来判断数组元素顺序</p></li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> vector<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> vector<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> vector <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p3 <span class="token operator">=</span> vector <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2 - p0: %d\n"</span><span class="token punctuation">,</span>p2 <span class="token operator">-</span> p0<span class="token punctuation">)</span></code></pre><h3 id="12-动态内存管理"><a href="#12-动态内存管理" class="headerlink" title="12 动态内存管理"></a>12 动态内存管理</h3><ul><li><p>动态内存分配基本步骤</p><ol><li><p>申请空间</p><p>使用<code>malloc</code>类函数申请堆内存空间</p><p>函数原型<code>void *malloc(int size);</code></p><ul><li>返回值是<code>void *</code>类型，需要强转</li><li>示例 <code>int *p = (int *)(malloc(sizeof(int))</code></li></ul></li></ol></li></ul><pre><code>2. 使用空间 在程序中使用这块空间3. 释放空间 - 使用完指针用`free`释放 - 函数原型`void free(void *p)`</code></pre><ul><li><p>内存泄漏</p><ul><li><p>丢失地址<br><img src="1.png" alt="Alt"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>隐式内存泄漏</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> count <span class="token operator">++</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>动态内存分配函数</p><ul><li><p><code>maloc</code></p></li><li><p><code>realocl</code></p><ul><li><p>重新分配内存</p></li><li><p>函数原型<code>void *realloc(void *ptr, size_t size);</code></p></li><li><p>当第两参数为空时，同<code>malloc</code></p></li></ul></li><li><p><code>calloc</code></p><ul><li>函数原型<code>void *calloc(size_t numElements,size_t elementSize);</code></li><li>分配<code>numElements x elementSize</code>大小的空间</li><li>例如 <code>int *p = calloc(5, sizeof(int));</code>分配了4个<code>int</code>大小的空间</li></ul></li><li><p><code>free</code></p><ul><li>释放指针</li></ul></li></ul></li></ul><h3 id="13-free函数释放内存"><a href="#13-free函数释放内存" class="headerlink" title="13. free函数释放内存"></a>13. <code>free</code>函数释放内存</h3><ul><li><p>函数原型<code>void free(void *ptr);</code></p></li><li><p>示例：</p></li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="2.png" alt></p><ul><li>释放后指针状态变为<strong>未定义</strong>的，一般释放后将指针显式的赋值为NULL。</li><li>对同一块内存进行多次释放造成异常。例如：</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="14-迷途指针"><a href="#14-迷途指针" class="headerlink" title="14.迷途指针"></a>14.迷途指针</h3><ul><li><p>如果内存已经释放，而指针还在引用原始内存，这样的指针成为迷途指针，也叫野指针</p></li><li><p>带来的问题：</p><ul><li>如果访问内存，行为不可预期；</li><li>如果内存不可访问，则是<strong>段错误</strong>（段错误： 访问非法内存或者未申请的内存）</li><li>安全隐患</li></ul></li><li><p>处理迷途指针</p><ul><li>释放指针后置为NULL。</li><li>写一个特殊的<code>free</code>函数</li><li>第三方工具检测</li></ul></li></ul><h3 id="15-动态内存分配技术"><a href="#15-动态内存分配技术" class="headerlink" title="15.动态内存分配技术"></a>15.动态内存分配技术</h3><ul><li>C的垃圾回收</li><li>资源获取即初始化</li><li>异常处理函数</li></ul><h3 id="16-常量与指针"><a href="#16-常量与指针" class="headerlink" title="16.常量与指针"></a>16.常量与指针</h3><ul><li>什么是常量</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span></code></pre><ul><li>数据类型和<code>const</code>关键字顺序不重要：<code>const int</code>和<code>int const</code>等价</li><li>普通变量：常量&amp;非常量，指针：常量指针&amp;非常量指针。组合起来四种</li><li>常量指针<code>const int *p</code>和指针常量<code>int* const p</code><ul><li>常量指针，<code>(const int *)p</code>,指针指向的数据是一个常量，指针可变，指向的值不可变</li><li>指针常量，<code>int* (const p)</code>,又叫常指针，指针是一个常量，指针不可变，值可变</li></ul></li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> a2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非常量</span><span class="token keyword">const</span> <span class="token keyword">int</span> b1 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span> b2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常量</span><span class="token comment" spellcheck="true">//1.指向非常量的非常量指针</span><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a1<span class="token punctuation">;</span>a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">;</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>b1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//2.指向常量的非常量指针</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>b1<span class="token punctuation">;</span>p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>b2<span class="token punctuation">;</span>b2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//3.指向非常量的常量指针</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token operator">&amp;</span>a1<span class="token punctuation">;</span>p3 <span class="token operator">=</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">;</span><span class="token operator">*</span>p3 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>a1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.指向常量的常量指针</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p4 <span class="token operator">=</span> <span class="token operator">&amp;</span>b1<span class="token punctuation">;</span>p4 <span class="token operator">=</span> <span class="token operator">&amp;</span>b2<span class="token punctuation">;</span>b2 <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span><span class="token operator">*</span>p4 <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span></code></pre><ul><li><p>总结</p><p>假设指针<code>p</code>指向变量<code>a</code></p></li></ul><table><thead><tr><th align="center">指针类型</th><th>p是否可修改</th><th>*p是否可修改</th><th>a是否可修改</th></tr></thead><tbody><tr><td align="center">指向非常量的非常量指针</td><td>是</td><td>是</td><td>是</td></tr><tr><td align="center">指向常量的非常量指针</td><td>是</td><td>否</td><td>否</td></tr><tr><td align="center">指向非常量的常量指针</td><td>否</td><td>是</td><td>是</td></tr><tr><td align="center">指向常量的常量指针</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><h3 id="17-指针和函数"><a href="#17-指针和函数" class="headerlink" title="17.指针和函数"></a>17.指针和函数</h3><h4 id="1-传递数据"><a href="#1-传递数据" class="headerlink" title="1. 传递数据"></a>1. 传递数据</h4><ul><li><p>交换数据,比较下面两个交换函数的区别</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//指针传递数据，拷贝一份内容传递进去</span><span class="token keyword">void</span> <span class="token function">swapWithPointers</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//值传递</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> x<span class="token punctuation">;</span>    x <span class="token operator">=</span> y<span class="token punctuation">;</span>    y <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token function">swapWithPointers</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %d, y = %d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>形参&amp;实参</p></li><li><p>返回指针。比较下面的差别。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//初始化长度为size的数组值全为value</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">allocateArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开辟空间</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">allocateArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>传递指针的指针</p><p> 用传递指针的方法在函数内部修改数据，那如果要修改指针呢？</p><ul><li><p>程序1</p><p>```c<br>#include&lt;stdio.h&gt;<br>#include&lt;stdlib.h&gt;</p><p>void pointer(int *p)<br>{<br>  int a = 11;<br>  printf(“\n\n进入函数”);<br>  printf(“\np指向 %X , 地址是 %X, *p is %d”, p, &amp;p, *p);<br>  *p = 11;<br>  printf(“\np指向 %X , 地址是 %X, *p is %d”, p, &amp;p, *p);<br>  p = &a;<br>  printf(“\np指向 %X, 地址是 %X, *p is %d”, p, &amp;p, *p);</p><p>  printf(“\n函数返回\n”);<br>}</p><p>int main() {<br>  int b = 22;<br>  int *p = &b;<br>  printf(“b的地址 %X\n”, &amp;b);<br>  printf(“p指向 %X , 地址是 %X, *p is %d”, p, &amp;p, *p);<br>  pointer(p);<br>  printf(“\np指向 %X , 地址是 %X, *p is %d\n”, p, &amp;p, *p);<br>  system(“pause”);<br>  return 0;<br>}</p><p>/*<br>b的地址 4FF908<br>p指向 4FF908 , 地址是 4FF8FC, *p is 22</p><p>进入函数<br>p指向 4FF908 , 地址是 4FF828, *p is 22<br>p指向 4FF908 , 地址是 4FF828, *p is 11<br>p指向 4FF814, 地址是 4FF828, *p is 11<br>函数返回</p><p>p指向 4FF908 , 地址是 4FF8FC, *p is 11<br>请按任意键继续. . .</p></li></ul><p> */</p><pre><code> ![](3.png) 问题： 为什么进入函数内部后指针的地址发生了变化？回头看交换数据的代码 - 程序2 ```c #include&lt;stdio.h&gt;    #include&lt;stdlib.h&gt;    #include&lt;string.h&gt;    void GetMemory(char *p, int num){        p = (char*)malloc(sizeof(char)*num);    }    int main() {        char *str = NULL;        GetMemory(str, 100);        strcpy(str, &quot;hello&quot;);        printf(str);        system(&quot;pause&quot;);        return 0;    }</code></pre><ul><li><p>上面的代码有没有问题？为什么</p></li><li><p>程序3</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">GetMemory</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">GetMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>str<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>对比上一个程序，为什么？</li></ul></li></ul></li></ul><h4 id="2-函数指针"><a href="#2-函数指针" class="headerlink" title="2. 函数指针"></a>2. 函数指针</h4><ul><li><p>申明函数指针<code>void (*foo)();</code>  </p><p>返回值类型 （* 名称）(参数列表);</p></li><li><p>使用</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span> f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    f <span class="token operator">=</span> square<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d * %d = % d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>为函数指针申明类型定义</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>funcptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>funcptr fptr<span class="token punctuation">;</span>fptr <span class="token operator">=</span> square<span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>传递函数指针</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>fptrOperation<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">compute</span><span class="token punctuation">(</span>fptrOperation operation<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">operation</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"5 + 6 = %d\n"</span><span class="token punctuation">,</span> <span class="token function">compute</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"5 - 6 = %d\n"</span><span class="token punctuation">,</span> <span class="token function">compute</span><span class="token punctuation">(</span>subtract<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>返回函数指针</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//在上面的基础上 添加函数</span>fptrOperation <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">char</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span><span class="token keyword">return</span> add<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span><span class="token keyword">return</span> subtract<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">char</span> code<span class="token punctuation">,</span> <span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fptrOperation operation <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">operation</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"5 + 6 = %d\n"</span><span class="token punctuation">,</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"5 - 6 = %d\n"</span><span class="token punctuation">,</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><ul><li><p>函数指针数组</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//修改代码</span><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>operation<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>operation operations<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    operations<span class="token punctuation">[</span><span class="token string">'+'</span><span class="token punctuation">]</span> <span class="token operator">=</span> add<span class="token punctuation">;</span>    operations<span class="token punctuation">[</span><span class="token string">'-'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subtract<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">evaluateArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> code<span class="token punctuation">,</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    fptrOperation operation<span class="token punctuation">;</span>      operation <span class="token operator">=</span> operations<span class="token punctuation">[</span>code<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">operation</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="18-指针和数组"><a href="#18-指针和数组" class="headerlink" title="18.指针和数组"></a>18.指针和数组</h3><h3 id="19-指针和字符串"><a href="#19-指针和字符串" class="headerlink" title="19.指针和字符串"></a>19.指针和字符串</h3>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫-获取古诗文网诗句</title>
      <link href="/2019/11/04/poetry/"/>
      <url>/2019/11/04/poetry/</url>
      
        <content type="html"><![CDATA[<h1 id="花自飘零水自流。一种相思，两处闲愁。"><a href="#花自飘零水自流。一种相思，两处闲愁。" class="headerlink" title="花自飘零水自流。一种相思，两处闲愁。"></a>花自飘零水自流。一种相思，两处闲愁。</h1><a id="more"></a><h1 id="1-确定爬取古诗范围"><a href="#1-确定爬取古诗范围" class="headerlink" title="1.确定爬取古诗范围"></a>1.确定爬取古诗范围</h1><p>看了一下网页首页，发现<strong>名句</strong>挺中意的，那就他了吧,然后网址看一下第二页</p><p><code>https://so.gushiwen.org/mingju/default.aspx?p=2&amp;c=&amp;t=</code></p><p><code>p = num num</code>表示第<code>num</code>页,网页版一共只能看20页</p><p><code>c,t</code>后面是类别，具体有哪些可以去网上看</p><p><img src="1.png" alt="首页"></p><h1 id="2-查看网页源码"><a href="#2-查看网页源码" class="headerlink" title="2.查看网页源码"></a>2.查看网页源码</h1><p>打开开发者工具，猜测所有的古诗应该是在一个div里面一个个的<code>item</code>,果然，让我在<code>class = &quot;sons&quot;</code>这个<code>div</code>逮着他了。</p><p><img src="2.png" alt="首页"></p><h1 id="3-继续分析网页源码"><a href="#3-继续分析网页源码" class="headerlink" title="3.继续分析网页源码"></a>3.继续分析网页源码</h1><p>打开<code>class = “sons”</code> 这个<code>div</code>，可以看到每一个<code>item</code>有两个<code>a</code>标签，一个转到这句诗，一个转到这首诗。嗯，等会解析网页就直接获取到上面的<code>div</code>然后遍历<code>item</code>，提取文字然后拆分就完事了</p><p><img src="3.png" alt="首页"></p><h1 id="4-愉快的撸代码"><a href="#4-愉快的撸代码" class="headerlink" title="4.愉快的撸代码"></a>4.愉快的撸代码</h1><h2 id="1-环境：jupyter-notebook"><a href="#1-环境：jupyter-notebook" class="headerlink" title="1.环境：jupyter notebook"></a>1.环境：<code>jupyter notebook</code></h2><h2 id="2-导包"><a href="#2-导包" class="headerlink" title="2.导包"></a>2.导包</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token comment" spellcheck="true">#请求</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup <span class="token comment" spellcheck="true"># 解析</span></code></pre><h2 id="3-这次真写代码了"><a href="#3-这次真写代码了" class="headerlink" title="3.这次真写代码了"></a>3.这次真写代码了</h2><h3 id="1-构造URLS"><a href="#1-构造URLS" class="headerlink" title="1.构造URLS"></a>1.构造<code>URLS</code></h3><pre class=" language-python"><code class="language-python">urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"https://so.gushiwen.org/mingju/Default.aspx?p={}&amp;c=&amp;t="</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h2 id="2-遍历URL获取数据"><a href="#2-遍历URL获取数据" class="headerlink" title="2.遍历URL获取数据"></a>2.遍历<code>URL</code>获取数据</h2><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    sons <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">"sons"</span><span class="token punctuation">)</span>    cont <span class="token operator">=</span> sons<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"cont"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取每一个item</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> cont<span class="token punctuation">:</span>        datas<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>getText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 拆分</span></code></pre><h3 id="3-保存数据"><a href="#3-保存数据" class="headerlink" title="3.保存数据"></a>3.保存数据</h3><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"名句.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> datas<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="4-大功告成"><a href="#4-大功告成" class="headerlink" title="4.大功告成"></a>4.大功告成</h4><p>文件数据：</p><p><img src="4.png" alt="首页"></p><h1 id="5-全部源码"><a href="#5-全部源码" class="headerlink" title="5.全部源码"></a>5.全部源码</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupurls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"https://so.gushiwen.org/mingju/Default.aspx?p={}&amp;c=&amp;t="</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span>datas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>count <span class="token operator">=</span> <span class="token number">0</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"名句.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    sons <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">"sons"</span><span class="token punctuation">)</span>    cont <span class="token operator">=</span> sons<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"cont"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> cont<span class="token punctuation">:</span>        datas<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>getText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span>item<span class="token punctuation">.</span>getText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">for</span> item <span class="token keyword">in</span> datas<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 古诗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 古诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome超星尔雅</title>
      <link href="/2019/10/15/tampermonkey/"/>
      <url>/2019/10/15/tampermonkey/</url>
      
        <content type="html"><![CDATA[<h1 id="Chrome安装Tampermonkey刷网课"><a href="#Chrome安装Tampermonkey刷网课" class="headerlink" title="Chrome安装Tampermonkey刷网课"></a>Chrome安装Tampermonkey刷网课</h1><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>你需要下载一个chrome浏览器</p><h2 id="1-下载Tampermonkey插件"><a href="#1-下载Tampermonkey插件" class="headerlink" title="1.下载Tampermonkey插件"></a>1.下载Tampermonkey插件</h2><p>链接：<a href="https://pan.baidu.com/s/1N--2kh8qEzdw9LNaubxCVg" target="_blank" rel="noopener">https://pan.baidu.com/s/1N--2kh8qEzdw9LNaubxCVg</a><br>提取码：bl3z </p><h2 id="2-离线安装插件"><a href="#2-离线安装插件" class="headerlink" title="2.离线安装插件"></a>2.离线安装插件</h2><p>输入<code>chrome://extensions</code>打开拓展程序</p><p><img src="1.png" alt></p><p>右上角打开开发者模式</p><p><img src="2.png" alt></p><p>将前面下载的文件拖动到Chrome拓展程序里</p><p>浏览器网址右边出现图标就代表完成了。</p><p><img src="5.png" alt></p><h2 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3.安装插件"></a>3.安装插件</h2><p>打开<a href="https://greasyfork.org/zh-CN/scripts?utf8=%E2%9C%93&q=%E8%B6%85%E6%98%9F" target="_blank" rel="noopener">greasyfork</a>下载插件，超星网课助手以及超星网课助手(考试专版)</p><p><img src="4.png" alt></p><h2 id="4-刷刷刷"><a href="#4-刷刷刷" class="headerlink" title="4.刷刷刷"></a>4.刷刷刷</h2><p>打开网课网址，挂后台就行。别倍速小心被安排。然后该干嘛干嘛去就行</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tampermonkey </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-day01 第一个应用</title>
      <link href="/2019/10/11/django-day01-di-yi-ge-ying-yong/"/>
      <url>/2019/10/11/django-day01-di-yi-ge-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Pycharm下新建第一个Django应用"><a href="#Pycharm下新建第一个Django应用" class="headerlink" title="Pycharm下新建第一个Django应用"></a>Pycharm下新建第一个Django应用</h1><a id="more"></a><h2 id="1-打开pycharm"><a href="#1-打开pycharm" class="headerlink" title="1. 打开pycharm"></a>1. 打开pycharm</h2><h2 id="2-新建项目"><a href="#2-新建项目" class="headerlink" title="2. 新建项目"></a>2. 新建项目</h2><p><img src="1.png" alt></p><h2 id="3-目录结构"><a href="#3-目录结构" class="headerlink" title="3. 目录结构"></a>3. 目录结构</h2><p><img src="2.png" alt></p><h2 id="4-helloworld目录下修改view-py"><a href="#4-helloworld目录下修改view-py" class="headerlink" title="4. helloworld目录下修改view.py"></a>4. helloworld目录下修改view.py</h2><p><img src="3.png" alt></p><h2 id="5-修改myapp下url-py"><a href="#5-修改myapp下url-py" class="headerlink" title="5. 修改myapp下url.py"></a>5. 修改myapp下url.py</h2><p><img src="4.png" alt></p><h2 id="6-运行"><a href="#6-运行" class="headerlink" title="6. 运行"></a>6. 运行</h2><p><img src="5.png" alt></p><h4 id="这样便启动服务了，在本地的8000端口"><a href="#这样便启动服务了，在本地的8000端口" class="headerlink" title="这样便启动服务了，在本地的8000端口"></a>这样便启动服务了，在本地的8000端口</h4><p><img src="6.png" alt></p><h2 id="7-输入网址。如下便是成功了"><a href="#7-输入网址。如下便是成功了" class="headerlink" title="7. 输入网址。如下便是成功了"></a>7. 输入网址。如下便是成功了</h2><p><img src="7.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假作业-LeetCode</title>
      <link href="/2019/09/14/android-summer-homework/"/>
      <url>/2019/09/14/android-summer-homework/</url>
      
        <content type="html"><![CDATA[<h1 id="19年暑假实验室布置的几道LeetCode题目"><a href="#19年暑假实验室布置的几道LeetCode题目" class="headerlink" title="19年暑假实验室布置的几道LeetCode题目:"></a>19年暑假实验室布置的几道LeetCode题目:</h1><a id="more"></a><h3 id="824-⼭⽺拉丁⽂"><a href="#824-⼭⽺拉丁⽂" class="headerlink" title="824.  ⼭⽺拉丁⽂"></a>824.  ⼭⽺拉丁⽂</h3><p>题目:<img src="/2019/09/14/android-summer-homework/6.png"></p><p>思路：手动分割字符串，再用vector很好弄的</p><p>运行时间:<img src="/2019/09/14/android-summer-homework/1.png"></p><p>代码：</p><pre class=" language-c++"><code class="language-c++">/* * @Author: wcowboy  * @Date: 2019-09-14 13:19:16  * @Last Modified by:   wcowboy  * @Last Modified time: 2019-09-14 13:19:16  *//* * @lc app=leetcode.cn id=824 lang=cpp * * [824] 山羊拉丁文 */class Solution {public:    string toGoatLatin(string S) {        vector<string> sub;        vector<int> position = {0};        int t = 0;        for (int i = 0; i < S.length(); i++){            if (S[i] == ' '){                t ++ ;                position.push_back(i + 1);            }        }        position.push_back(S.size());        for (int i = 0;i < position.size() -1 ;i ++){            sub.push_back(S.substr(position[i],position[i + 1] - position[i]));        }        for (int i = 0;i < sub.size() - 1;i ++){            sub[i].erase(sub[i].size() - 1,1);        }        for (int i = 0;i < sub.size();i ++){            if (! isVowel(sub[i][0])){                char t = sub[i][0];                sub[i].erase(0,1);                sub[i] = sub[i] + t;            }            sub[i] = sub[i] + "ma";            for (int j = 0;j <= i ;j ++){                sub[i] = sub[i] + "a";            }        }        S.erase(0,S.size());        for (int i = 0;i < sub.size() - 1;i++){            S = S + sub[i] + " ";        }        S = S + sub[sub.size() - 1 ];        return S;    }    int isVowel(char c){        string s = "aeiouAEIOU";        for (int i = 0; i < 10;i ++){            if (c == s[i]){                return 1;            }        }        return 0;     }};</code></pre><h3 id="1078-Bigram-分词"><a href="#1078-Bigram-分词" class="headerlink" title="1078. Bigram 分词"></a>1078. Bigram 分词</h3><p>题目: <img src="/2019/09/14/android-summer-homework/7.png"></p><p>思路: 也是一个字符串分词的题,分割之后遍历</p><img src="/2019/09/14/android-summer-homework/2.png"><p>代码：</p><pre class=" language-c++"><code class="language-c++">/* * @Author: wcowboy  * @Date: 2019-09-14 13:20:04  * @Last Modified by:   wcowboy  * @Last Modified time: 2019-09-14 13:20:04  *//* * @lc app=leetcode.cn id=1078 lang=cpp * * [1078] Bigram 分词 */class Solution {public:    vector<string> findOcurrences(string text, string first, string second) {        vector<string> result,sub;        string temp ;        for (int i = 0;i <= text.length();i ++){            if (text[i] == ' ' || text[i] == '\0'){                sub.push_back(temp);                temp = "";            }            else{                temp.push_back(text[i]);            }        }        for (int i = 0;i < sub.size() - 2;i ++){            if (sub[i].compare(first) == 0){                if (sub[i + 1].compare(second) == 0){                    result.push_back(sub[i + 2]);                }            }        }        return result;    }};</code></pre><h3 id="120-三⾓形最⼩路径和"><a href="#120-三⾓形最⼩路径和" class="headerlink" title="120. 三⾓形最⼩路径和"></a>120. 三⾓形最⼩路径和</h3><p>题目: <img src="/2019/09/14/android-summer-homework/8.png"></p><p>递推公式<br>$$<br>f(i,j) = min{f(i-1,j-1),f(i-1),f(j)}+triangle(i,j)<br>$$<br>思路: 按递推公式算就行了每一次更新自身信息，遍历一遍数组就可以了，我觉得用一层循环也可以遍历数组，然后时间复杂度就下降了。</p><p>提交结果:<img src="/2019/09/14/android-summer-homework/3.png"></p><p>代码：</p><pre class=" language-C++"><code class="language-C++">/* * @Author: wcowboy  * @Date: 2019-09-14 13:20:26  * @Last Modified by:   wcowboy  * @Last Modified time: 2019-09-14 13:20:26  *//* * @lc app=leetcode.cn id=120 lang=cpp * * [120] 三角形最小路径和 */class Solution {public:    int minimumTotal(vector<vector<int>>& triangle) {           int t;        if (triangle.size() == 0){            return 0;        }        if (triangle.size() == 1){            return triangle[0][0];        }        for (int i = 1;i < triangle.size();i ++){            for (int j = 0;j < triangle[i].size();j ++){                if (j == 0){                    triangle[i][j] = triangle[i - 1][j] + triangle[i][j];                }                else if (j == i ){                    triangle[i][j] = triangle[i - 1][j - 1] + triangle[i][j];                }                else {                    int min =  triangle[i - 1][j - 1] < triangle[i - 1][j] ? triangle[i - 1][j - 1] : triangle[i - 1][j] ;                    triangle[i][j] = min + triangle[i][j];                }            }        }        t = triangle[triangle.size() - 1][0];        for (int i = 0;i < triangle.size();i ++){                if (t > triangle[triangle.size() - 1][i]){                    t = triangle[triangle.size() - 1][i];                }        }        return t;    }};</code></pre><h3 id="121-872-叶⼦相似的树"><a href="#121-872-叶⼦相似的树" class="headerlink" title="121. 872. 叶⼦相似的树"></a>121. 872. 叶⼦相似的树</h3><p>题目: <img src="/2019/09/14/android-summer-homework/9.png"></p><p>思路: 这个，暴力至上，强行遍历二叉树，所以。。。内存开销大，还是用的递归就更那啥了，凑合着能用就行了233</p><p>提交结果:<img src="/2019/09/14/android-summer-homework/4.png"></p><p>代码:</p><pre class=" language-c++"><code class="language-c++">/* * @Author: wcowboy  * @Date: 2019-09-14 13:20:42  * @Last Modified by:   wcowboy  * @Last Modified time: 2019-09-14 13:20:42  *//* * @lc app=leetcode.cn id=872 lang=cpp * * [872] 叶子相似的树 *//** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */class Solution {public:    bool leafSimilar(TreeNode* root1, TreeNode* root2) {        vector<int> a,b;        a = getArray(a, root1);        b = getArray(b, root2);        if(a.size() != b.size()) {            return false;        } else {            for(int i = 0; i < a.size(); i++) {                if(a[i] != b[i]) {                    return false;                }            }        }        return true;    }    vector<int> getArray(vector<int>& v, TreeNode* root) {        if(root->left == NULL && root->right == NULL) {            v.push_back(root->val);        }        if(root->left != NULL) {            getArray(v, root->left);        }        if(root->right != NULL) {            getArray(v, root->right);        }        return v;    }};</code></pre><h3 id="863-⼆叉树中所有距离为-K-的结点"><a href="#863-⼆叉树中所有距离为-K-的结点" class="headerlink" title="863. ⼆叉树中所有距离为 K 的结点"></a>863. ⼆叉树中所有距离为 K 的结点</h3><p>题目: <img src="/2019/09/14/android-summer-homework/10.png"></p><p>思路：用map建立子结点和父结点的键值对，这样就可以从底向上访问二叉树了。然后再去查距离就行了</p><p>提交结果:<img src="/2019/09/14/android-summer-homework/5.png"></p><p>代码：</p><pre class=" language-c++"><code class="language-c++">/* * @lc app=leetcode.cn id=863 lang=cpp * * [863] 二叉树中所有距离为 K 的结点 *//** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */class Solution{public:    map<TreeNode *, TreeNode *> par;    //建立子-父亲结点键值对    void findparent(TreeNode *root)    {        if (!root)            return;        if (root->left)        {            par[root->left] = root;            findparent(root->left);        }        if (root->right)        {            par[root->right] = root;            findparent(root->right);        }    }    void dfs(TreeNode *root, int k, set<TreeNode *> &visited, vector<int> &res)    {        if (visited.find(root) != visited.end())            return;        visited.insert(root);        if (k == 0)        {            res.push_back(root->val);            return;        }        if (root->left)            dfs(root->left, k - 1, visited, res);        if (root->right)            dfs(root->right, k - 1, visited, res);        TreeNode *p = par[root];        if (p)            dfs(p, k - 1, visited, res);    }    vector<int> distanceK(TreeNode *root, TreeNode *target, int K)    {        if (!root)            return {};        findparent(root);        vector<int> res;        set<TreeNode *> visited;        dfs(target, K, visited, res);        return res;    }};</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaEE学习01-初识Play</title>
      <link href="/2019/09/03/javaee-xue-xi-01-chu-shi-play/"/>
      <url>/2019/09/03/javaee-xue-xi-01-chu-shi-play/</url>
      
        <content type="html"><![CDATA[<h1 id="win10下play配置与第一个程序"><a href="#win10下play配置与第一个程序" class="headerlink" title="win10下play配置与第一个程序"></a>win10下play配置与第一个程序</h1><a id="more"></a> <ol><li><h2 id="下载play"><a href="#下载play" class="headerlink" title="下载play"></a>下载play</h2></li></ol><ul><li>我这里用的版本是1.5.1</li><li><a href="https://pan.baidu.com/s/1MgUNfKsfdH5ieeI5etteDw" target="_blank" rel="noopener">百度云链接</a> <a href="https://pan.baidu.com/s/1MgUNfKsfdH5ieeI5etteDw" target="_blank" rel="noopener">https://pan.baidu.com/s/1MgUNfKsfdH5ieeI5etteDw</a> 提取码: igug </li><li>下载工具：<a href="www.pandownload.com">pandownload</a>或者<a href="www.speedpan.com">speedpan</a></li><li>下载完成后解压</li></ul><ol start="2"><li><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2></li><li><p>进入play解压目录，复制文件路径</p></li></ol><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/1.png" alt></p><ol start="4"><li>右击我的电脑 –&gt;属性–&gt;高级系统设置–&gt;环境变量–&gt;高级系统设置–&gt;环境变量–&gt;找到path，添加刚刚复制的play文件夹的路径</li></ol><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/2.png" alt><br><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/3.png" alt><br><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/4.png" alt><br><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/5.png" alt></p><ol start="5"><li><p>win+R,输入cmd打开命令提示符</p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/6.png" alt></p></li><li><p>输入play，出现下图则环境配置成功<br> <img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/7.png" alt></p></li><li><p>cd desktop进入桌面，新建一个应用</p></li></ol><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/8.png" alt></p><ol start="9"><li>进入应用目录，启动</li></ol><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/9.png" alt></p><ol start="10"><li>浏览器地址栏输入localhost:9000出现下图界面</li></ol><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/10.png" alt></p><ol start="10"><li>进入软件目录</li></ol><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/11.png" alt></p><p>主要文件：</p><ul><li><p>app：应用代码</p><ul><li><p>controllers</p></li><li><p>models</p></li><li><p>views</p></li></ul></li><li><p>conf：配置文件</p><ul><li>application.conf</li><li>dependencies.yml</li><li>messages</li><li>routes</li></ul></li></ul><ol start="11"><li>进入 <strong>myApp\app\views\Application</strong> </li></ol><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/12.png" alt></p><ol start="12"><li><p>用记事本打开index.html</p></li><li><p>修改代码<br>去掉第四行的<em>#{welcome /}</em>,修改为</p></li></ol><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/14.png" alt></p><pre><code>#{extends &#39;main.html&#39; /}#{set title:&#39;Home&#39; /}Hello World    </code></pre><ol start="14"><li>刷新浏览器 ,效果如下</li></ol><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/13.png" alt></p><ol start="15"><li>浏览器输 l<strong><em>ocalhost:9000/@documentation</em></strong>可以查看文档</li></ol><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/javaEE/1/15.png" alt></p><ol start="16"><li>OVER</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> play </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MathType 破解安装</title>
      <link href="/2019/07/18/mathtype-po-jie-an-zhuang/"/>
      <url>/2019/07/18/mathtype-po-jie-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="MathType破解安装"><a href="#MathType破解安装" class="headerlink" title="MathType破解安装"></a>MathType破解安装</h1><a id="more"></a> <h2 id="1-安装包及补丁下载"><a href="#1-安装包及补丁下载" class="headerlink" title="1. 安装包及补丁下载"></a>1. 安装包及补丁下载</h2><p><a href="https://pan.baidu.com/s/12i2Mb_xSSJnwVwhBa47k_w" target="_blank" rel="noopener">百度云链接</a>:<a href="https://pan.baidu.com/s/12i2Mb_xSSJnwVwhBa47k_w密码:w365" target="_blank" rel="noopener">https://pan.baidu.com/s/12i2Mb_xSSJnwVwhBa47k_w密码:w365</a></p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/1.png" alt></p><ul><li>MathType-win-zh,win10安装包</li><li>mathtype7.x-patchs : 补丁,来源<a href="https://www.ghpym.com/mathtype7.html" target="_blank" rel="noopener">果核剥壳</a>,不放心可以自己去网站主页查看</li></ul><p>不能忍受百度云限速的请下载<a href="www.pandoenload.com">pandownload</a>或者<a href="www.speedpan.com">速盘:speed</a>使用,具体使用方法请看官网</p><h2 id="2-MathType-安装"><a href="#2-MathType-安装" class="headerlink" title="2. MathType 安装"></a>2. MathType 安装</h2><ol><li><h3 id="双击打开MathType-win-zh-exe"><a href="#双击打开MathType-win-zh-exe" class="headerlink" title="双击打开MathType-win-zh.exe"></a>双击打开MathType-win-zh.exe</h3></li><li><h3 id="点击我接受"><a href="#点击我接受" class="headerlink" title="点击我接受"></a>点击我接受</h3><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/2.png" alt></p></li><li><h3 id="耐心等待"><a href="#耐心等待" class="headerlink" title="耐心等待"></a>耐心等待</h3></li><li><h3 id="更改安装目录"><a href="#更改安装目录" class="headerlink" title="更改安装目录"></a>更改安装目录</h3><p> <img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/3.png" alt></p></li><li><h3 id="点击确定完成安装"><a href="#点击确定完成安装" class="headerlink" title="点击确定完成安装"></a>点击确定完成安装</h3><p> <img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/4.png" alt></p></li><li><h3 id="点击退出安装"><a href="#点击退出安装" class="headerlink" title="点击退出安装"></a>点击退出安装</h3><p> <img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/5.png" alt></p></li></ol><h2 id="3-禁网破解"><a href="#3-禁网破解" class="headerlink" title="3. 禁网破解"></a>3. 禁网破解</h2><h3 id="MathType禁网"><a href="#MathType禁网" class="headerlink" title="MathType禁网"></a>MathType禁网</h3><ul><li><p>打开<strong>网络和Internet设置</strong><br><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/8.png" alt></p></li><li><p>打开<strong>windows防火墙</strong></p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/9.png" alt></p></li><li><p>打开<strong>高级设置</strong></p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/10.png" alt></p></li><li><p>新建<strong>入站规则</strong></p></li><li><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/11.png" alt></p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/12.png" alt></p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/13.png" alt></p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/14.png" alt></p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/15.png" alt></p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/16.png" alt></p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/17.png" alt></p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/18.png" alt></p></li><li><p>同理新建<strong>出站规则</strong></p></li><li><p>入站出站规则建立好就行了</p><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3></li><li><p>双击打开运行mathtype7.x-patch.exe</p></li><li><p>点击应用开始破解<br><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/6.png" alt></p></li><li><p>补丁打好,破解完毕</p></li><li><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/7.png" alt></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3></li><li><p>新建word文档</p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/19.png" alt></p></li><li><p>测试</p></li></ul><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/MathType/20.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MathType </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫1--爬取北京短租房信息</title>
      <link href="/2019/07/14/python-pa-chong-1-pa-qu-bei-jing-duan-zu-fang-xin-xi/"/>
      <url>/2019/07/14/python-pa-chong-1-pa-qu-bei-jing-duan-zu-fang-xin-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Python爬虫：爬取北京地区短租房信息"><a href="#Python爬虫：爬取北京地区短租房信息" class="headerlink" title="Python爬虫：爬取北京地区短租房信息"></a>Python爬虫：爬取北京地区短租房信息</h1><a id="more"></a> <h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>用python + requests + BeautifulSoup 北京地区短租房信息。包括标题，地址，价格，房东名称，性别，头像链接</p><h2 id="2-URL构造"><a href="#2-URL构造" class="headerlink" title="2.  URL构造"></a>2.  URL构造</h2><p>打开<a href="[https://bj.xiaozhu.com](https://bj.xiaozhu.com/)">小猪短租北京首页</a>：可以看到主页如下图：</p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/python/1.png" alt></p><p>手动翻页浏览前几页观察URL：</p><pre><code>&lt;https://bj.xiaozhu.com/&gt;&lt;https://bj.xiaozhu.com/search-duanzufang-p2-0/&gt;&lt;https://bj.xiaozhu.com/search-duanzufang-p3-0/&gt;</code></pre><p>发现更改p后面的数字好像可以访问不同的页，将其改成p1发现也可以访问第一页，然后就可以构造全部的13页网址</p><pre class=" language-python"><code class="language-python">urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://bj.xiaozhu.com/search-duanzufang-p{}-0/'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token keyword">for</span> number <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h2 id="3-获取房源连接"><a href="#3-获取房源连接" class="headerlink" title="3. 获取房源连接"></a>3. 获取房源连接</h2><p>打开开发者工具可以看到对应的所有房子的链接都在<ul>表签下，只需要遍历一遍就可以获取每一个房源的链接</ul></p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/python/2.png" alt></p><h2 id="4-获取房源对应信息"><a href="#4-获取房源对应信息" class="headerlink" title="4. 获取房源对应信息"></a>4. 获取房源对应信息</h2><p>点开一个房源，复制如下信息</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># tittles ：#body > div.wrap.clearfix.con_bg > div.con_l > div.pho_info > h4 > em</span><span class="token comment" spellcheck="true"># addresses ：#body > div.wrap.clearfix.con_bg > div.con_l > div.pho_info > p > span</span><span class="token comment" spellcheck="true"># prices ：#span.pr5</span><span class="token comment" spellcheck="true"># imgs ：#floatRightBox > div.js_box.clearfix > div.member_pic > a > img</span><span class="token comment" spellcheck="true"># names ：#floatRightBox > div.js_box.clearfix > div.w_240 > h6 > a</span><span class="token comment" spellcheck="true"># sexs ：#floatRightBox > div.js_box.clearfix > div.member_pic > div</span></code></pre><p>判断性别: 发现女性</p><pre class=" language-html"><code class="language-html"> &lt;span class = ”member_girl_ico"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p>构造判断性别的函数:根据类名判断</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">judgment_sex</span><span class="token punctuation">(</span>class_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> class_name <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token string">'member_ico1'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'女'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'男'</span></code></pre><h2 id="5-信息储存"><a href="#5-信息储存" class="headerlink" title="5. 信息储存"></a>5. 信息储存</h2><p>信息临时用list保存list写入文件，因为有些汉字没有编码可能无法写入，写入文件时加一个UnicodeEncodeError</p><h2 id="6-最终结果"><a href="#6-最终结果" class="headerlink" title="6.最终结果"></a>6.最终结果</h2><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/python/3.png" alt><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/python/4.png" alt></p><h2 id="7-具体代码"><a href="#7-具体代码" class="headerlink" title="7.具体代码"></a>7.具体代码</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup <span class="token comment" spellcheck="true"># 解析request请求的网页，将源码解析成Soup文档</span><span class="token keyword">import</span> requests                 <span class="token comment" spellcheck="true"># 获取网页数据</span><span class="token keyword">import</span> time                     <span class="token comment" spellcheck="true"># 调用延时函数</span><span class="token comment" spellcheck="true"># 请求头，伪装浏览器</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 打开txt文档</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'xiaozhuduanzhu.txt'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义性别判断函数</span><span class="token keyword">def</span> <span class="token function">judgment_sex</span><span class="token punctuation">(</span>class_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> class_name <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token string">'member_ico1'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'女'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'男'</span><span class="token comment" spellcheck="true"># 根据每一页的url获取每一个房源的url</span><span class="token keyword">def</span> <span class="token function">get_links</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    wb_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>wb_data<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    links <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#page_list > ul > li > a'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>                                <span class="token comment" spellcheck="true"># 遍历房源信息</span>        href <span class="token operator">=</span> link<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span>        get_info<span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取每个房源的信息</span><span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    wb_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#请求</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>wb_data<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 信息获取</span>    tittles <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div.wrap.clearfix.con_bg > div.con_l > div.pho_info > h4 >em'</span><span class="token punctuation">)</span>    addresses <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'span.pr5'</span><span class="token punctuation">)</span>    prices <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#pricePart > div.day_l > span'</span><span class="token punctuation">)</span>    imgs <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#floatRightBox > div.js_box.clearfix > div.member_pic > a > img'</span><span class="token punctuation">)</span>    names <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#floatRightBox > div.js_box.clearfix > div.w_240 > h6 > a'</span><span class="token punctuation">)</span>    sexs <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#floatRightBox > div.js_box.clearfix > div.member_pic > div'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#遍历</span>    <span class="token keyword">for</span> tittle<span class="token punctuation">,</span> address<span class="token punctuation">,</span> price<span class="token punctuation">,</span> img<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex <span class="token keyword">in</span> zip<span class="token punctuation">(</span>tittles<span class="token punctuation">,</span> addresses<span class="token punctuation">,</span> prices<span class="token punctuation">,</span> imgs<span class="token punctuation">,</span> names<span class="token punctuation">,</span> sexs<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'tittle'</span><span class="token punctuation">:</span> tittle<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 去除空格</span>            <span class="token string">'address'</span><span class="token punctuation">:</span> address<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'price'</span><span class="token punctuation">:</span> price<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">#转文本</span>            <span class="token string">'img'</span><span class="token punctuation">:</span> img<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># 获取图片链接</span>            <span class="token string">'sex'</span><span class="token punctuation">:</span> judgment_sex<span class="token punctuation">(</span>sex<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#写数据</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">except</span> UnicodeEncodeError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://bj.xiaozhu.com/search-duanzufang-p{}-0/'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token keyword">for</span> number <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> single_url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        get_links<span class="token punctuation">(</span>single_url<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机入门</title>
      <link href="/2019/03/02/keil4/"/>
      <url>/2019/03/02/keil4/</url>
      
        <content type="html"><![CDATA[<h1 id="keil4安装及点亮第一个LED"><a href="#keil4安装及点亮第一个LED" class="headerlink" title="keil4安装及点亮第一个LED"></a>keil4安装及点亮第一个LED</h1><a id="more"></a> <p>​    请支持正版，破解仅供学习使用</p><p>​    花几个小时发现不是装的C51的(某管家的锅)，无奈重写。</p><p>​    博客刚搭建好很多地方还没配置，是有蛮丑。将就凑合一下，咳咳</p><p>​    github是图床，偶尔抽风加载不出来，加载慢。。。</p><h3 id="1-keil4简介"><a href="#1-keil4简介" class="headerlink" title="1.keil4简介"></a>1.keil4简介</h3><p>Keil C51是美国Keil Software公司出品的51系列兼容单片机C语言软件开发系统，与汇编相比，C语言在功能上、结构性、可读性、可维护性上有明显的优势，因而易学易用。Keil提供了包括C编译器、宏汇编、链接器、库管理和一个功能强大的仿真调试器等在内的完整开发方案，通过一个集成开发环境（μVision）将这些部分组合在一起。运行Keil软件需要WIN98、NT、WIN2000、WINXP等操作系统。如果你使用C语言编程，那么Keil几乎就是你的不二之选，即使不使用C语言而仅用汇编语言编程，其方便易用的集成环境、强大的软件仿真调试工具也会令你事半功倍。        ——百度百科</p><h3 id="2-keil4安装及破解"><a href="#2-keil4安装及破解" class="headerlink" title="2.keil4安装及破解"></a>2.keil4安装及破解</h3><p><a href="https://pan.baidu.com/s/1_yBrM-gL2DAYPowyak-hSw" target="_blank" rel="noopener">下载链接</a>密码：c6ez</p><p>百度网盘下载可以使用<a href="https://www.speedpan.com/" target="_blank" rel="noopener">速盘</a>或者<a href="http://www.pandownload.com/" target="_blank" rel="noopener">PanDownload</a>，具体使用方法参见网站</p><p>开始安装之前请确保杀毒软件等关闭，否则破解软件会被安排掉</p><p>开始安装之前请确保杀毒软件等关闭，否则破解软件会被安排掉</p><p>开始安装之前请确保杀毒软件等关闭，否则破解软件会被安排掉</p><p>不关闭的话下载的文件会被干掉。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><h6 id="1-双击运行C51V901-exe"><a href="#1-双击运行C51V901-exe" class="headerlink" title="1.双击运行C51V901.exe"></a>1.双击运行C51V901.exe</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p21.png" alt></p><h6 id="2-选择I-agree，然后next"><a href="#2-选择I-agree，然后next" class="headerlink" title="2.选择I agree，然后next"></a>2.选择I agree，然后next</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p22.png" alt></p><h6 id="3-选择路径，然后next"><a href="#3-选择路径，然后next" class="headerlink" title="3.选择路径，然后next"></a>3.选择路径，然后next</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p23.png" alt></p><h6 id="4-信息随便填，7就完事"><a href="#4-信息随便填，7就完事" class="headerlink" title="4.信息随便填，7就完事"></a>4.信息随便填，7就完事</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p24.png" alt></p><h6 id="5-等待安装完成"><a href="#5-等待安装完成" class="headerlink" title="5.等待安装完成"></a>5.等待安装完成</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p25.png" alt></p><h6 id="6-finish"><a href="#6-finish" class="headerlink" title="6.finish"></a>6.finish</h6><h4 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h4><h6 id="7-在桌面找到Keil-uVision4，右键以管理员身份打开"><a href="#7-在桌面找到Keil-uVision4，右键以管理员身份打开" class="headerlink" title="7.在桌面找到Keil uVision4，右键以管理员身份打开"></a>7.在桌面找到Keil uVision4，右键以管理员身份打开</h6><h6 id="8-如图所示打开"><a href="#8-如图所示打开" class="headerlink" title="8.如图所示打开"></a>8.如图所示打开</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p28.png" alt></p><h6 id="9-复制CID"><a href="#9-复制CID" class="headerlink" title="9.复制CID"></a>9.复制CID</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p29.png" alt></p><h6 id="10-打开下载的KEIL-Lic注册机，将刚刚复制的CID粘贴进去，选择C51，点击generate，复制生成的文本"><a href="#10-打开下载的KEIL-Lic注册机，将刚刚复制的CID粘贴进去，选择C51，点击generate，复制生成的文本" class="headerlink" title="10.打开下载的KEIL_Lic注册机，将刚刚复制的CID粘贴进去，选择C51，点击generate，复制生成的文本"></a>10.打开下载的KEIL_Lic注册机，将刚刚复制的CID粘贴进去，选择C51，点击generate，复制生成的文本</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p210.png" alt></p><h6 id="11-回到keil4，将复制的文本粘贴，点击ADD-LIC-出现successful就行了，上面会显示到期的日期，不满意时间可以重复7-10步骤。点击close关闭。"><a href="#11-回到keil4，将复制的文本粘贴，点击ADD-LIC-出现successful就行了，上面会显示到期的日期，不满意时间可以重复7-10步骤。点击close关闭。" class="headerlink" title="11.回到keil4，将复制的文本粘贴，点击ADD LIC,出现successful就行了，上面会显示到期的日期，不满意时间可以重复7-10步骤。点击close关闭。"></a>11.回到keil4，将复制的文本粘贴，点击ADD LIC,出现successful就行了，上面会显示到期的日期，不满意时间可以重复7-10步骤。点击close关闭。</h6><h6 id="12-破解完成"><a href="#12-破解完成" class="headerlink" title="12.破解完成"></a>12.破解完成</h6><h3 id="3-stc-isp下载以及stc系列头文件导入"><a href="#3-stc-isp下载以及stc系列头文件导入" class="headerlink" title="3.stc-isp下载以及stc系列头文件导入"></a>3.stc-isp下载以及stc系列头文件导入</h3><p>51单片机大多数情况下使用的是stc系列单片机，但是安装的keil4中是没有stc的头文件的，因此需要手动导入，stc-icp来将keil生成的.hex文件烧录到单片机</p><h6 id="1-下载最新版stc-isp，往下滑就有了-不得不吐槽一下这个官网，咳咳，小广告既视感"><a href="#1-下载最新版stc-isp，往下滑就有了-不得不吐槽一下这个官网，咳咳，小广告既视感" class="headerlink" title="1.下载最新版stc-isp，往下滑就有了(不得不吐槽一下这个官网，咳咳，小广告既视感)"></a>1.下载最新版stc-isp，往下滑就有了(不得不吐槽一下这个官网，咳咳，小广告既视感)</h6><p><a href="http://www.stcisp.com/" target="_blank" rel="noopener">下载链接</a></p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p31.png" alt></p><h6 id="2-解压下载好的压缩包，打开stc-isp，依次点击keil仿真设置，添加型号和头文件到keil中，选择安装路径中的C51文件夹。点击确定，出现“STC-MCU型号添加成功”即可。"><a href="#2-解压下载好的压缩包，打开stc-isp，依次点击keil仿真设置，添加型号和头文件到keil中，选择安装路径中的C51文件夹。点击确定，出现“STC-MCU型号添加成功”即可。" class="headerlink" title="2.解压下载好的压缩包，打开stc-isp，依次点击keil仿真设置，添加型号和头文件到keil中，选择安装路径中的C51文件夹。点击确定，出现“STC MCU型号添加成功”即可。"></a>2.解压下载好的压缩包，打开stc-isp，依次点击keil仿真设置，添加型号和头文件到keil中，选择安装路径中的C51文件夹。点击确定，出现“STC MCU型号添加成功”即可。</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p32.png" alt></p><h3 id="4-点亮第一个LED"><a href="#4-点亮第一个LED" class="headerlink" title="4.点亮第一个LED"></a>4.点亮第一个LED</h3><h5 id="1-程序编写"><a href="#1-程序编写" class="headerlink" title="1.程序编写"></a>1.程序编写</h5><h6 id="1-重新打开keil4，project——-gt-new-project"><a href="#1-重新打开keil4，project——-gt-new-project" class="headerlink" title="1.重新打开keil4，project——&gt;new project"></a>1.重新打开keil4，project——&gt;new project</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p41.png" alt></p><h6 id="2-选择工程存放路径，输入工程名，然后保存"><a href="#2-选择工程存放路径，输入工程名，然后保存" class="headerlink" title="2.选择工程存放路径，输入工程名，然后保存"></a>2.选择工程存放路径，输入工程名，然后保存</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p42.png" alt></p><h6 id="3-接下来选择STC的"><a href="#3-接下来选择STC的" class="headerlink" title="3.接下来选择STC的"></a>3.接下来选择STC的</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p43.png" alt></p><h6 id="4-芯片选择STC89C52RC，C52RC比C51区别在与ROM等方面，编程而言几乎差不多。"><a href="#4-芯片选择STC89C52RC，C52RC比C51区别在与ROM等方面，编程而言几乎差不多。" class="headerlink" title="4.芯片选择STC89C52RC，C52RC比C51区别在与ROM等方面，编程而言几乎差不多。"></a>4.芯片选择STC89C52RC，C52RC比C51区别在与ROM等方面，编程而言几乎差不多。</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p44.png" alt></p><h6 id="5-这里选择否"><a href="#5-这里选择否" class="headerlink" title="5.这里选择否"></a>5.这里选择否</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p45.png" alt></p><h6 id="6-CTRL-N新建c，CTRL-S保存，注意文件名需要手动添加-c后缀（不能为-cpp）。保存"><a href="#6-CTRL-N新建c，CTRL-S保存，注意文件名需要手动添加-c后缀（不能为-cpp）。保存" class="headerlink" title="6.CTRL + N新建c，CTRL+ S保存，注意文件名需要手动添加.c后缀（不能为.cpp）。保存"></a>6.CTRL + N新建c，CTRL+ S保存，注意文件名需要手动添加.c后缀（不能为.cpp）。保存</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p46.png" alt></p><h6 id="7-在左侧的project里面点开target双击source-group选择刚刚的c文件。add，然后close"><a href="#7-在左侧的project里面点开target双击source-group选择刚刚的c文件。add，然后close" class="headerlink" title="7.在左侧的project里面点开target双击source group选择刚刚的c文件。add，然后close"></a>7.在左侧的project里面点开target双击source group选择刚刚的c文件。add，然后close</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p47.png" alt></p><h6 id="8-在led-c中输入如下代码-markdown没得C51。。。所以reg52那里没得高亮-，如图点击按钮或者按F7-Fn-F7-编译，编译成功如下图所示（没出现的话到11步应该能行）。"><a href="#8-在led-c中输入如下代码-markdown没得C51。。。所以reg52那里没得高亮-，如图点击按钮或者按F7-Fn-F7-编译，编译成功如下图所示（没出现的话到11步应该能行）。" class="headerlink" title="8.在led.c中输入如下代码(markdown没得C51。。。所以reg52那里没得高亮)，如图点击按钮或者按F7(Fn+F7)编译，编译成功如下图所示（没出现的话到11步应该能行）。"></a>8.在led.c中输入如下代码(markdown没得C51。。。所以reg52那里没得高亮)，如图点击按钮或者按F7(Fn+F7)编译，编译成功如下图所示（没出现的话到11步应该能行）。</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg52.h></span></span>sbit led <span class="token operator">=</span> P1<span class="token operator">^</span><span class="token number">0</span>    <span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         led <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//高电平有效的换成led = 1;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id><a href="#" class="headerlink" title></a><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p48.png" alt></h6><h6 id="9-编译成功了，接下来利用stc-isp将我们的程序烧录到单片机。"><a href="#9-编译成功了，接下来利用stc-isp将我们的程序烧录到单片机。" class="headerlink" title="9.编译成功了，接下来利用stc-isp将我们的程序烧录到单片机。"></a>9.编译成功了，接下来利用stc-isp将我们的程序烧录到单片机。</h6><p>​    在这之前先设置点东西，点击target旁边的那个像锤子一样的按钮</p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p49.png" alt></p><h6 id="10-设置晶振频率"><a href="#10-设置晶振频率" class="headerlink" title="10.设置晶振频率"></a>10.设置晶振频率</h6><p>​    打开的界面中点击target，设置晶振频率为11.0592MHZ.晶振还有12MHZ等等其他频率</p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p410.png" alt></p><h6 id="11-产生-hex文件"><a href="#11-产生-hex文件" class="headerlink" title="11.产生.hex文件"></a>11.产生.hex文件</h6><p>​    在界面上点击output，勾选creat hex file.点击ok完成，按F7编译。</p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p411.png" alt></p><h5 id="2-烧写文件"><a href="#2-烧写文件" class="headerlink" title="2.烧写文件"></a>2.烧写文件</h5><h6 id="1-下载串口"><a href="#1-下载串口" class="headerlink" title="1.下载串口"></a>1.下载串口</h6><p>​    打开下载的文件夹的CH341SER.EXE，点击安装串口，失败的话，咳咳我懒得写了，百度有解决办法的。</p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p421.png" alt></p><h6 id="2-选择串口，芯片，波特率"><a href="#2-选择串口，芯片，波特率" class="headerlink" title="2.选择串口，芯片，波特率"></a>2.选择串口，芯片，波特率</h6><p>​    用usb线将单片机连接到笔记本。打开stc-isp，选择单片机型号，芯片上都有著名的，我的是C52RC(老板子了咳咳)，串口就是刚刚安装的，一般能自动识别，没自动识别的话，百度会告诉你怎么看自己的串口的。然后打开程序文件，路径是工程路径，添加.hex文件。</p><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p422.png" alt></p><h6 id="3-烧录"><a href="#3-烧录" class="headerlink" title="3.烧录"></a>3.烧录</h6><p>​    将单片机电源开关断开使之处于掉电（power led不亮）,然后点击下载/编程，将单片机上电(需要冷启动，详细的请百度这里不再介绍)。</p><h6 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h6><p><img src="https://wcowboy-1258563652.cos.ap-chengdu.myqcloud.com/Blog/Microcontrollers/p424.png" alt></p><p>点亮led灯在单片机学习中就好比学习编程语言的输出hello world一样</p><h2 id="如果没有板子的同学比比较多的话，计划有时间在用protues仿真51点亮led。"><a href="#如果没有板子的同学比比较多的话，计划有时间在用protues仿真51点亮led。" class="headerlink" title="如果没有板子的同学比比较多的话，计划有时间在用protues仿真51点亮led。"></a>如果没有板子的同学比比较多的话，计划有时间在用protues仿真51点亮led。</h2><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C51 </tag>
            
            <tag> keil4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/13/hello-world/"/>
      <url>/2019/01/13/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
